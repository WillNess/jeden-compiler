# test file

#module :Test where
    I :: a : Type
      :- a -> a ;
    I := \x. x ;

    K :: a : Type, b : Type
      :- a -> b -> b ;
    K := \x y. y ;

    S :: a : Type, b : Type, c : Type
      :- (a -> b -> c) -> (a -> b) -> a -> c ;
    S := \x y z. x z (y z) ;

    One :: any : Type :- Type ;
    One := any -> any ;

    unit :: One ;
    unit := \x. x ;

    elim1 :: out : Type
          :- out -> One -> out ;
    elim1 := \x t. t x ;

    id :: One -> One ;
    id := \u. u unit ;

    # And now for dependent types
    List :: r : Type :- Type -> Type ;
    List := \a. r -> (a -> r -> r) -> r ;

    Eq :: a : Type, C : a -> a -> Type
       :- a -> a -> Type ;
    Eq := \x y. ((z : a) -> C z z) -> C x y ;

    refl :: (x : a) -> Eq x x ;
    refl := \x. \f. f x ;

    J :: a : Type,
         x : a, y : a,
         C : a -> a -> Type
      :- ((z : a) -> C z z) -> Eq x y -> C x y ;
    J := \f r. r f ;
